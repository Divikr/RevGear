<%- include("../partials/header.ejs")  %>
<style>
    :root {
        --primary-color: #3b82f6;
        --success-color: #10b981;
        --text-dark: #1f2937;
        --text-light: #6b7280;
    }
    .progress-step.completed {
        background-color: var(--success-color);
        color: white;
        border-color: var(--success-color);
    }
    .progress-step.active {
        border-color: var(--primary-color);
        color: var(--primary-color);
    }
    @media (max-width: 640px) {
        .order-details {
            flex-direction: column;
        }
    }
  
#returnOrderModal {
    display: none;
}


#returnOrderModal.show {
    display: flex;
}

</style>

<script src="path/to/your/script.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.11.1/gsap.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/gsap.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/ScrollTrigger.min.js"></script>


<body class="bg-gray-50 text-gray-900 antialiased">
    <div class="container mx-auto px-4 py-8 max-w-4xl">
        <section class="order-progress bg-white shadow-md rounded-lg p-6 mb-8">
            <section>
                <h2 class="text-xl font-semibold text-gray-700 mb-6">Order Progress</h2>
                <div class="flex items-center justify-between progress-container">
                    <% if (order.orderStatus === 'Cancelled') { %>
                        <div class="flex mb-4 items-center justify-center w-full py-6 bg-red-100 border border-red-500 rounded-lg shadow-md">
                            <div class="flex items-center space-x-4">
                                <svg class="w-8 h-8 text-red-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                                    <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
                                </svg>
                                <span class="text-red-700 font-bold text-xl">Order Cancelled</span>
                            </div>
                        </div>
                    <% } else if (order.orderStatus === 'Return Success') { %>
                        <div class="flex mb-4 items-center justify-center w-full py-6 bg-green-100 border border-green-500 rounded-lg shadow-md">
                            <div class="flex items-center space-x-4">
                                <svg class="w-8 h-8 text-green-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                                    <path stroke-linecap="round" stroke-linejoin="round" d="M5 13l4 4L19 7" />
                                </svg>
                                <span class="text-green-700 font-bold text-xl">Return Order Successful</span>
                            </div>
                        </div>
                    <% } else if (order.orderStatus === 'Return Reject') { %>
                        <div class="flex mb-4 items-center justify-center w-full py-6 bg-red-100 border border-red-500 rounded-lg shadow-md">
                            <div class="flex items-center space-x-4">
                                <svg class="w-8 h-8 text-red-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                                    <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
                                </svg>
                                <span class="text-red-700 font-bold text-xl">Return Order Rejected</span>
                            </div>
                        </div>
                    <% }else { %>
                       
                        <div class="flex-1 flex flex-col items-center order-progress-step">
                            <div class="progress-step <%= order.orderStatus === 'Ordered' || ['Shipped', 'Out For Delivery', 'Delivered', 'Return Pending'].includes(order.orderStatus) ? 'completed' : '' %> rounded-full h-12 w-12 flex items-center justify-center border-2 text-lg font-bold">
                                1
                            </div>
                            <div class="flex-1 h-1.5 bg-green-300 mx-2"></div>
                            <span class="mt-2 text-sm font-medium <%= order.orderStatus === 'Ordered' || ['Shipped', 'Out For Delivery', 'Delivered', 'Return Pending'].includes(order.orderStatus) ? 'text-green-500' : 'text-gray-400' %>">
                                Order Placed
                            </span>
                        </div>
            
                     
                        <div class="flex-1 flex flex-col items-center order-progress-step">
                            <div class="progress-step <%= ['Shipped', 'Out For Delivery', 'Delivered', 'Return Pending'].includes(order.orderStatus) ? 'completed' : order.orderStatus === 'Ordered' ? 'active' : '' %> rounded-full h-12 w-12 flex items-center justify-center border-2 text-lg font-bold">
                                2
                            </div>
                            <div class="flex-1 h-1.5 bg-green-300 mx-2"></div>
                            <span class="mt-2 text-sm font-medium <%= ['Shipped', 'Out For Delivery', 'Delivered', 'Return Pending'].includes(order.orderStatus) ? 'text-blue-500' : 'text-gray-400' %>">
                                Shipped
                            </span>
                        </div>
            
                       
                        <div class="flex-1 flex flex-col items-center order-progress-step">
                            <div class="progress-step <%= ['Out For Delivery', 'Delivered', 'Return Pending'].includes(order.orderStatus) ? 'completed' : order.orderStatus === 'Shipped' ? 'active' : '' %> rounded-full h-12 w-12 flex items-center justify-center border-2 text-lg font-bold">
                                3
                            </div>
                            <div class="flex-1 h-1.5 bg-green-300 mx-2"></div>
                            <span class="mt-2 text-sm font-medium <%= ['Out For Delivery', 'Delivered', 'Return Pending'].includes(order.orderStatus) ? 'text-yellow-500' : 'text-gray-400' %>">
                                Out For Delivery
                            </span>
                        </div>
            
                     
                        <div class="flex-1 flex flex-col items-center order-progress-step">
                            <div class="progress-step <%= ['Delivered', 'Return Pending'].includes(order.orderStatus) ? 'completed' : order.orderStatus === 'Out For Delivery' ? 'active' : '' %> rounded-full h-12 w-12 flex items-center justify-center border-2 text-lg font-bold">
                                4
                            </div>
                            <div class="flex-1 h-1.5 bg-green-300 mx-2"></div>
                            <span class="mt-2 text-sm font-medium <%= ['Delivered', 'Return Pending'].includes(order.orderStatus) ? 'text-gray-400' : 'text-gray-400' %>">
                                Delivered
                            </span>
                        </div>
            
                        <% if (order.orderStatus === 'Return Pending') { %>
                            <div class="flex-1 flex flex-col items-center order-progress-step">
                                <div class="progress-step active rounded-full h-12 w-12 flex items-center justify-center border-2 text-lg font-bold">
                                    5
                                </div>
                                <div class="flex-1 h-1.5 bg-green-300 mx-2"></div>
                                <span class="mt-2 text-sm font-medium text-orange-500">
                                    Return Pending
                                </span>
                            </div>
                        <% } %>
                    <% } %>
                </div>
            </section>
            
            
            
            <br><br>
            
            

        

        <div class="order-details grid md:grid-cols-2 gap-8">
            <section class="bg-white shadow-md rounded-lg p-6">
                <h2 class="text-xl font-semibold text-gray-700 mb-6">Order Items</h2>
                <div class="space-y-6">
                    <% order.items.forEach(item => { %>
                        <div class="flex items-center space-x-4 product-item">
                            <img src="<%= item.productId.productImage[0] %>" alt="Product" class="h-24 w-24 rounded-lg object-cover">
                            <div>
                                <h3 class="text-lg font-semibold text-gray-800"><%= item.productId.name %></h3>
                                <p class="text-gray-500 text-sm">Quantity: <%= item.quantity %></p>
                                <p class="text-blue-600 font-medium">₹<%= item.price.toFixed(2) %></p>
                            </div>
                        </div>
                    <% }) %>
                </div>
            </section>

            <div class="space-y-8">
                <section class="bg-white shadow-md rounded-lg p-6">
                    <h2 class="text-xl font-semibold text-gray-700 mb-6">Order Summary</h2>
                    <div class="space-y-4">
                        <div class="flex justify-between items-center">
                            <span class="text-gray-600">Subtotal</span>
                            <span class="text-gray-800 font-medium">₹<%= order.totalAmount.toFixed(2) %></span>
                        </div>
                        <div class="flex justify-between items-center">
                            <span class="text-gray-600">Shipping</span>
                            <span class="text-gray-800 font-medium">₹<%= order.shippingCost || '100.00' %></span>
                        </div>
                        <hr class="border-gray-200">
                        <div class="flex justify-between items-center font-bold">
                            <span class="text-gray-900">Total</span>
                            <span class="text-blue-600 text-xl">₹<%= (order.totalAmount + (order.shippingCost || 100)).toFixed(2) %></span>
                            
                        
                        </div>
                        <br>
                          
                        <div>
                            <span class="text-gray-900">Payment Method:</span>
                            <span class="text-blue-400 text-m"> <%= order.paymentMethod %></span>
                        </div>
                       
                    </div>

                    <div class="mt-6 flex justify-end">
                        <% if (order.orderStatus === 'Delivered') { %>
                            <a href="/invoice/<%= order._id %>" 
                               class="bg-blue-600 text-white font-semibold py-2 px-4 rounded-md shadow hover:bg-blue-700 transition duration-200">
                                Download Invoice
                            </a>
                        <% } %>
                    </div>

                    <% if (!['Shipped', 'Out For Delivery', 'Delivered','Cancelled','Return Pending','Return Success','Return Reject','Payment Pending'].includes(order.orderStatus)) { %>
                        <button  onclick="showCancelModal()" class="mt-6 w-full bg-red-500 text-white py-3 rounded-lg hover:bg-red-600 transition-colors focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-opacity-50">

                            Cancel Order
                        </button>
                        
                    <% } %>


<div id="cancelOrderModal" 
class="fixed inset-0 z-50 hidden"
aria-labelledby="modal-title" 
role="dialog" 
aria-modal="true">
<div class="modal-backdrop absolute inset-0 bg-black bg-opacity-50">
   <div class="flex min-h-screen items-center justify-center p-4">
       <div class="modal-content bg-white rounded-lg shadow-xl p-6 w-full max-w-md mx-auto">
           <div class="flex justify-between items-center mb-4">
               <h2 id="modal-title" class="text-xl font-semibold text-gray-900">Cancel Order</h2>
               <button onclick="hideCancelModal()" class="text-gray-400 hover:text-gray-500">
                   <span class="sr-only">Close</span>
                   <svg class="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                       <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                   </svg>
               </button>
           </div>

           <form id="cancelOrderForm" onsubmit="handleCancelSubmit(event)">
               <div class="space-y-4">
                   <div>
                       <label for="reason" class="block text-sm font-medium text-gray-700">Select Reason</label>
                       <br>
                       <select id="reason" 
                               name="reason"
                               class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                               required>
                               <option value="select option">select option</option>
                           <option value="Got at Better Price">Got at Better Price</option>
                           <option value="Wrong Item Ordered">Wrong Item Ordered</option>
                           <option value="Shipping Time Too Long">Shipping Time Too Long</option>
                           <option value="Other Reason">Other Reason</option>
                       </select>
                   </div>

                   <br>
                   <div>
                       <label for="description" class="block text-sm font-medium text-gray-700">Reason</label>
                       <textarea id="description"
                                 name="description"
                                 rows="4"
                                 class="mt-1 block w-full rounded-md border-grey-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                                ></textarea>
                   </div>
               </div>

               <div class="mt-6 flex justify-end space-x-3">
                   <button type="button"
                           onclick="hideCancelModal()"
                           class="px-4 py-2 text-sm font-medium text-gray-700 bg-gray-100 rounded-md hover:bg-gray-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500">
                       Cancel
                   </button>
                   <button type="submit"
                           class="px-4 py-2 text-sm font-medium text-white bg-red-600 rounded-md hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500">
                       Confirm Cancellation
                   </button>
               </div>
           </form>
       </div>
   </div>
</div>
</div>
<% if (order.orderStatus === 'Delivered') { %>
    <button 
    id="showReturnButton" 
    class="mt-6 w-full bg-orange-500 text-white py-3 rounded-lg hover:bg-orange-600 transition-colors focus:outline-none focus:ring-2 focus:ring-orange-500 focus:ring-opacity-50">
    Return Order
</button>
<% } %>

<div id="returnModal" class="fixed inset-0 bg-gray-800 bg-opacity-50 flex justify-center items-center hidden">
    <div class="bg-white rounded-lg shadow-lg p-6 w-96">
        <h2 class="text-xl font-semibold mb-4 text-gray-800">Return Order</h2>
        <form id="returnForm">
            
            <label for="return-reason" class="block text-sm font-medium text-gray-700 mb-2">Reason</label>
            <select id="return-reason" name="return-reason" class="w-full border-gray-300 rounded-lg p-2 mb-4 focus:ring-2 focus:ring-orange-500 focus:outline-none">
                <option value="">Select a reason</option>
                <option value="Damaged product">Damaged product</option>
                <option value="Received wrong product">Received wrong product</option>
                <option value="Product not as described">Product not as described</option>
                <option value="Other">Other</option>
            </select>

            <label for="return-description" class="block text-sm font-medium text-gray-700 mb-2">Description</label>
            <textarea
                id="return-description"
                name="return-description"
                rows="4"
                class="w-full border-gray-300 rounded-lg p-2 mb-4 focus:ring-2 focus:ring-orange-500 focus:outline-none"
                placeholder="Describe the issue..."></textarea>

          
            <div class="flex justify-end space-x-4">
                <button
                    id="cancelButton"
                    type="button"
                    class="bg-gray-300 text-gray-700 py-2 px-4 rounded-lg hover:bg-gray-400 transition-colors focus:outline-none">
                    Cancel
                </button>
                <button
                    id="submitButton"
                    type="submit"
                    class="bg-orange-500 text-white py-2 px-4 rounded-lg hover:bg-orange-600 transition-colors focus:outline-none focus:ring-2 focus:ring-orange-500">
                    Submit
                </button>
            </div>
        </form>
    </div>
</div>


<% if (order.orderStatus === 'Payment Pending') { %>
    <form onsubmit="event.preventDefault(); retryPayment('<%= order._id %>');" style="display: inline;">
        <button type="button" 
                class="bg-blue-600 text-white font-semibold py-2 px-4 rounded-md shadow hover:bg-blue-700 transition duration-200"
                onclick="retryPayment('<%= order._id %>')">
            Retry Payment
        </button>
    </form>
<% } %>

                </section>


                <section class="bg-white shadow-md rounded-lg p-6">
                    <h2 class="text-xl font-semibold text-gray-700 mb-6">Shipping Details</h2>
                    <address class="not-italic text-gray-600">
                        <p class="font-semibold"><%= order.deliveryAddress.name %></p>
                        <p><%= order.deliveryAddress.streetAddress %></p>
                        <p><%= order.deliveryAddress.city %></p>
                        <p class="mt-2">Phone: <a href="tel:+<%= order.deliveryAddress.phone %>" class="text-blue-600">+91 <%= order.deliveryAddress.phone %></a></p>
                    </address>
                </section>
            </div>
        </div>
    </div>





<%- include("../partials/footer")  %>
<script src="https://checkout.razorpay.com/v1/checkout.js"></script>
<script>
  
    gsap.registerPlugin(ScrollTrigger);

  
    const progressSteps = gsap.utils.toArray('.order-progress-step');
    gsap.from(progressSteps, {
        duration: 1,
        opacity: 0,
        scale: 0.5,
        ease: "back",
        stagger: 0.3
    });


    const productItems = gsap.utils.toArray('.product-item');
    gsap.from(productItems, {
        scrollTrigger: {
            trigger: ".order-details",
            start: "top 80%"
        },
        duration: 1,
        opacity: 0,
        y: 30,
        stagger: 0.3
    });

    function showCancelModal() {
        const modal = document.getElementById('cancelOrderModal');
        const modalContent = modal.querySelector('.modal-content');
        modal.classList.remove('hidden');
        setTimeout(() => modalContent.classList.add('show'), 10);
    }

    function hideCancelModal() {
        const modal = document.getElementById('cancelOrderModal');
        const modalContent = modal.querySelector('.modal-content');
        modalContent.classList.remove('show');
        setTimeout(() => modal.classList.add('hidden'), 300);
    }

 

    async function handleCancelSubmit(event) {
  event.preventDefault();

  const reason = document.getElementById('reason').value;
  const description = document.getElementById('description').value;
  const orderId = "<%= order._id %>";

  if (!reason ) {
    Swal.fire({
      icon: 'error',
      title: 'Oops...',
      text: 'Please fill in all required fields'
    });
    return;
  }

  try {
    const response = await fetch(`/orders/cancel/${orderId}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        reason,
        description
      })
    });

    if (!response.ok) {
      throw new Error(`Failed to cancel order: ${response.statusText}`);
    }

    const result = await response.json();

    if (result.success) {
      Swal.fire({
        icon: 'success',
        title: 'Success',
        text: 'Order cancelled successfully'
      });
      hideCancelModal();
      window.location.reload();
    } else {
      throw new Error(result.message);
    }
  } catch (error) {
    console.error('Error cancelling order:', error);
    Swal.fire({
      icon: 'error',
      title: 'Failed',
      text: error.message || 'Failed to cancel order. Please try again later.'
    });
  }
}



document.getElementById('cancelOrderModal').addEventListener('click', (e) => {
    if (e.target === e.currentTarget) {
        hideCancelModal();
    }
});

document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape') {
        hideCancelModal();
    }
});






const showReturnButton = document.getElementById('showReturnButton');
const returnModal = document.getElementById('returnModal');
const cancelButton = document.getElementById('cancelButton');




showReturnButton.addEventListener('click', () => {
    console.log('Modal opened');
    returnModal.classList.remove('hidden');
});


cancelButton.addEventListener('click', () => {
    returnModal.classList.add('hidden');
});


document.getElementById("returnForm").addEventListener("submit", async function (event) {
        event.preventDefault(); 

      
        const reason = document.getElementById("return-reason").value;
        const description = document.getElementById("return-description").value;
        const orderId = "<%= order._id %>";
        console.log(orderId)
console.log("des",description)
      
        if (!reason || !description) {
            alert("Please fill in all fields before submitting.");
            return;
        }

       
        const requestData = {
            orderId:orderId,
            reason: reason,
            description: description,
        };

        console.log(requestData)
        try {
         
            const response = await fetch(`/orders/return-order/${orderId}`, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify(requestData),
            });

           
            if (response.ok) {
    const result = await response.json();
    Swal.fire({
        icon: "success",
        title: "Success",
        text: "Return order submitted successfully!",
    }).then(() => {
        // Reload the page
        window.location.reload();
    });
    console.log(result);
} else {
    Swal.fire({
        icon: "error",
        title: "Failed",
        text: "Failed to submit return order.",
    });
    console.error("Error:", response.statusText);
}
} catch (error) {
    console.error("Error:", error);
    Swal.fire({
        icon: "error",
        title: "Error",
        text: "An error occurred while submitting your return order.",
    }).then(() => {
        // Reload the page
        window.location.reload();
    });
}


       
        document.getElementById("returnModal").classList.add("hidden");
    });

   
    document.getElementById("cancelButton").addEventListener("click", function () {
        document.getElementById("returnModal").classList.add("hidden");
    });





    async function retryPayment(orderId) {
  try {
    // Call the backend API to create a Razorpay order
    const response = await fetch(`/retry-payment/${orderId}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      }
    });
    
    const data = await response.json();
    console.log(data);

    if (!data.success) {
      throw new Error(data.message || 'Failed to initiate payment');
    }

    const options = {
      key: data.key,
      amount: data.amount,
      currency: data.currency,
      order_id: data.razorpayOrderId,
      name: 'Your Store',
      description: 'Order Payment',
      handler: function(response) {
        const paymentDetails = {
          razorpay_order_id: response.razorpay_order_id,
          razorpay_payment_id: response.razorpay_payment_id,
          razorpay_signature: response.razorpay_signature,
          orderId: orderId
        };

        fetch('/payment-success', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(paymentDetails),
        })
        .then(orderResponse => orderResponse.json())
        .then(orderData => {
          if (orderData.success) {
            window.location.href = `/orderconfirm/${orderId}`;
          } else {
            Swal.fire({
              icon: 'error',
              title: 'Order Failed',
              text: orderData.message || 'Failed to place order.',
            });
          }
        })
        .catch(error => {
          console.error('Error placing order:', error);
          Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'An error occurred while placing the order.',
          });
        });
      },
      prefill: {
        name: 'Customer Name',
        email: 'customer@example.com',
        contact: '9999999999',
      },
      theme: {
        color: '#3399cc',
      },
    }; 

    const rzp = new Razorpay(options);
    rzp.open();
  } catch (error) {
    console.error('Payment retry error:', error);
    alert(error.message || 'Failed to initiate payment');
  }
}


</script>