<%- include("../partials/header.ejs")  %>


  <section class="container mx-auto py-12 px-4">

 
  <nav class="text-sm font-medium text-gray-700 mb-6 ">
    <ol class="list-reset flex">
      <li>
        <a href="/home" class="text-blue-600 hover:text-blue-700">Home</a>
      </li>
      <li class="mx-2">/</li>
      <li class="text-gray-400">Shop</li>
    </ol>
  </nav>
  <br>



    <div class="flex flex-col md:flex-row">
    
      <div class="w-full md:w-4/4">
        <div class="sorting mb-8">
          <form method="GET" action="" class="flex items-center space-x-4">
        
            <label for="sort" class="flex items-center text-gray-700 font-semibold text-lg space-x-2">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                class="h-6 w-6 text-blue-500"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
                stroke-width="2"
              >
                <path stroke-linecap="round" stroke-linejoin="round" d="M3 4h18M3 10h18m-7 6h7" />
              </svg>
              <span>Sort by:</span>
            </label>
        
          
            <div class="relative">
             
              <select
                name="sort"
                id="sort"
                onchange="this.form.submit()"
                class="appearance-none block w-full max-w-xs px-5 py-3 text-base bg-white border border-gray-300 rounded-lg shadow-md focus:ring-2 focus:ring-blue-500 focus:outline-none hover:shadow-lg transition duration-300"
              >
                <option value="" <%= !sort ? 'selected' : '' %>>Default</option>
                <option value="a-z" <%= sort === 'a-z' ? 'selected' : '' %>>A-Z</option>
                <option value="z-a" <%= sort === 'z-a' ? 'selected' : '' %>>Z-A</option>
                <option value="low-to-high" <%= sort === 'low-to-high' ? 'selected' : '' %>>
                  Price: Low to High
                </option>
                <option value="high-to-low" <%= sort === 'high-to-low' ? 'selected' : '' %>>
                  Price: High to Low
                </option>
              </select>
        
          
              <div class="absolute inset-y-0 right-3 flex items-center pointer-events-none">
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  class="h-5 w-5 text-gray-400"
                  viewBox="0 0 20 20"
                  fill="currentColor"
                >
                  <path
                    fill-rule="evenodd"
                    d="M5.293 9.293a1 1 0 011.414 0L10 12.586l3.293-3.293a1 1 0 011.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z"
                    clip-rule="evenodd"
                  />
                </svg>
              </div>
            </div>
          </form>
        </div>
        
        
        
<br>
<br>
    
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
          <% products.forEach(product => { %>
      
    
            <div class="product-card bg-white rounded-lg shadow-lg overflow-hidden transform hover:scale-105 transition-all duration-300 animate-fade-in">
              <div class="relative overflow-hidden group h-64">
                <div class="image-slider flex transition-transform duration-500 ease-in-out h-full">
                  <% product.productImage.forEach(image => { %>
                  <img src="<%= image %>" alt="Product" class="w-full h-full object-cover flex-shrink-0">
                  <% }) %>
                </div>
              </div>
              <a href="/product/<%= product._id %>" class="block">
                <div class="p-6">
                  <h3 class="text-xl font-bold text-gray-900 mb-2"><%= product.productName %></h3>
                  <h2 class="text-sm font-bold text-gray-400 mb-5"><%= product.description %></h2>
                  <div class="flex items-center justify-between mb-4">
                    <div class="flex items-center">
                      <span class="text-2xl font-bold text-red-600">₹<%= Math.round(product.salePrice)   %></span>
                      <span class="text-sm text-gray-500 line-through ml-2">₹<%= product.regularPrice %></span>
                    </div>
                    <% if (product.quantity > 0) { %>
                    <span class="bg-red-100 text-red-800 text-xs font-semibold px-2.5 py-0.5 rounded"><%= product.productOffer %> % OFF</span>
                    <% } else { %>
                    <span class="bg-gray-100 text-gray-800 text-xs font-semibold px-2.5 py-0.5 rounded out-of-stock-indicator">Out of Stock</span>
                    <% } %>
                  </div>
                  <div class="flex items-center mb-4">
                    <div class="flex text-yellow-400">
                      <% for (let i = 1; i <= 5; i++) { %>
                      <svg class="w-5 h-5 fill-current" viewBox="0 0 24 24">
                        <path d="M12 17.27L18.18 21l-1.64-7.03L22 9.24l-7.19-.61L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21z" />
                      </svg>
                      <% } %>
                    </div>
                    <span class="text-gray-600 ml-2">(4.5)</span>
                  </div>
                </div>
              </a>
              <div class="px-6 pb-6">
                <button onclick="addToCart('<%= product._id %>', this)" 
                  data-product-id="<%= product._id %>" 
                  class="w-full bg-red-600 hover:bg-red-700 text-white font-bold py-3 px-4 rounded-full transition duration-300 ease-in-out transform hover:scale-105 cart-btn <%= product.quantity === 0 ? 'opacity-50 cursor-not-allowed' : '' %>" 
                  <%= product.quantity === 0 ? 'disabled' : '' %>>
                  <span class="cart-text flex items-center justify-center space-x-2">
                    <i class="fas fa-shopping-cart"></i>
                    <span>Add to Cart</span>
                  </span>
                </button>
              </div>
              <button onclick="addToWishlist('<%= product._id %>', this)" 
                data-product-id="<%= product._id %>" 
                class="like-button absolute top-4 right-4 bg-white rounded-full p-2 shadow-md hover:bg-red-50 transition-colors duration-300" 
                data-liked="false">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                  <path stroke-linecap="round" stroke-linejoin="round" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z" />
                </svg>
              </button>
            </div>
      
          <% }) %>
        </div>
<br>
<br>
        <div class="pagination flex justify-center mt-6">
          <ul class="flex space-x-2">
              <% for (let i = 1; i <= totalPages; i++) { %>
                  <li>
                      <a href="?page=<%= i %>&limit=<%= limit %>&sort=<%= sort %>"
                         class="px-4 py-2 <%= i === currentPage ? 'bg-blue-600 text-white' : 'bg-gray-200 text-gray-700' %> rounded">
                          <%= i %>
                      </a>
                  </li>
              <% } %>
          </ul>
      </div>
        
        
      </div>
    </div>
   
  </div>
  
  </section>
  

<%- include("../partials/footer.ejs") %>
<script src="/js/header.js"></script>


<script>
   async function addToWishlist(productId, button) {
    try {
       
        button.classList.add('opacity-50', 'cursor-not-allowed');

        const response = await fetch('/wishlist/add', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ productId }),
            credentials: 'same-origin'
        });

        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.message); 
        }

        const data = await response.json();
        console.log(data.message);
      
        button.classList.remove('bg-gray-100', 'hover:bg-gray-200'); 
        button.classList.add('bg-green-500', 'hover:bg-green-600', 'text-white'); 

       
        Swal.fire({
            icon: 'success',
            title: 'Added to Wishlist!',
            text: 'The item has been added to your wishlist.',
            showConfirmButton: false,
            timer: 1500
        });
    } catch (error) {
        console.error('Error:', error.message);
        Swal.fire({
            icon: 'error',
            title: 'Error!',
            text: error.message || 'Failed to add to wishlist. Please try again.',
        });

       
        button.classList.remove('opacity-50', 'cursor-not-allowed');
        button.classList.add('bg-gray-100', 'hover:bg-gray-200'); 
    } finally {
       
        button.classList.remove('opacity-50', 'cursor-not-allowed');
    }
}


async function addToCart(productId, button) {
  try {
    button.classList.add('opacity-100');
    button.querySelector('span').textContent = 'Adding...';

    const response = await fetch('/addToCart', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ productId, quantity: 1, size: 'none' }),
      credentials: 'same-origin',
    });

    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.message || 'Failed to add item to cart.');
    }

    const data = await response.json();

    button.classList.remove('bg-red-600', 'hover:bg-red-700');
    button.classList.add('bg-green-500', 'hover:bg-green-600');
    button.querySelector('span').textContent = 'In Cart';

 
    Swal.fire({
      icon: 'success',
      title: 'Added!',
      text: data.message || 'The item has been added to your cart.',
      showConfirmButton: true,
      confirmButtonText: 'Go to Cart',
      showCancelButton: true,
      cancelButtonText: 'Continue Shopping',
      cancelButtonColor: '#3085d6',
      confirmButtonColor: '#28a745',
      reverseButtons: false,
    }).then((result) => {
      if (result.isConfirmed) {
        
        window.location.href = '/cart'; 
      } else if (result.isDismissed) {
        
        Swal.close();
      }
    });

  } catch (error) {
    console.error('Error:', error.message);

    button.classList.remove('opacity-50', 'cursor-not-allowed');
    button.classList.add('bg-red-600', 'hover:bg-red-700');
    button.querySelector('span').textContent = 'Add to Cart';

    Swal.fire({
      icon: 'error',
      title: 'Error!',
      text: error.message || 'Failed to add item to cart. Please try again.',
    });
  }
}






    
</script>
</body>

</html>