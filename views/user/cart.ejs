<%- include("../partials/header.ejs")  %>

<script src="https://cdnjs.cloudflare.com/ajax/libs/sweetalert/2.1.2/sweetalert.min.js" integrity="sha512-AA1Bzp5Q0K1KanKKmvN/4d3IRKVlv9PYgwFPvm32nPO6QS8yH1HO7LbgB1pgiOxPtfeg5zEn2ba64MUcqJx6CA==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>

<br>

  <nav class="text-sm ml-4 font-medium text-gray-700 mb-6 ">
    <ol class="list-reset flex">
      <li>
        <a href="/home" class="text-blue-600 hover:text-blue-700">Home</a>
      </li>
      <li class="mx-2">/</li>
      <li>
        <a href="/product" class="text-blue-600 hover:text-blue-700">Shop</a>
      </li>
      <li class="mx-2">/</li>
      
      <li class="text-gray-400">Cart</li>
    </ol>
  </nav>
  <br>

<h2 class="text-2xl sm:text-3xl font-light ml-4 sm:mb-8 uppercase tracking-wider">Shopping Bag</h2>

            <% if (cart.length > 0) { %>
                <div class="bg-white shadow-sm rounded-lg overflow-hidden mb-6 sm:mb-8"> 
                    <div class="hidden md:block overflow-x-auto">
                        <table class="min-w-full">
                            <thead>
                                <tr class="border-b">
                                    <th class="px-4 sm:px-6 py-3 sm:py-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Product</th>
                                    <th class="px-4 sm:px-6 py-3 sm:py-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Quantity</th>
                                    <th class="px-4 sm:px-6 py-3 sm:py-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Price</th>
                                    <th class="px-4 sm:px-6 py-3 sm:py-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Subtotal</th>
                                    <th class="px-4 sm:px-6 py-3 sm:py-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                                </tr>
                            </thead>
                            <tbody class="divide-y divide-gray-200">
                                <% cart.forEach(item => { %>
                                    <tr class="hover:bg-gray-50 transition-colors">
                            
                                        <td class="px-4 sm:px-6 py-3 sm:py-4">
                                            <div class="flex items-center space-x-4">
                                                <img 
                                                    src="<%= item.productId.productImage[0] %>" 
                                                    alt="<%= item.productId.productName %>" 
                                                    class="h-16 w-16 object-cover rounded-md"
                                                >
                                                <div>
                                                    <div class="font-medium text-gray-900"><%= item.productId.productName %></div>
                                                </div>
                                            </div>
                                        </td>
                                    
                                        <td class="px-4 sm:px-6 py-3 sm:py-4">
                                            <div class="flex items-center space-x-2">
                                                
                                                <button 
                                                    type="button" 
                                                    class="px-2 py-1 border border-gray-200 rounded-md focus:ring-2 focus:ring-black focus:border-transparent transition-all"
                                                    onclick="updateQuantity(this, -1)"
                                                    data-product-id="<%= item.productId._id %>">
                                                    -
                                                </button>
                                        
                                              
                                                <input 
                                                    type="number" 
                                                    name="quantity" 
                                                    value="<%= item.quantity %>" 
                                                    min="1" 
                                                    max="<%= item.productId.quantity %>"
                                                    data-product-id="<%= item.productId._id %>"
                                                    data-available-quantity="<%= item.productId.quantity %>"
                                                    data-original-quantity="<%= item.quantity %>"
                                                    class="w-16 sm:w-20 px-2 sm:px-3 py-1 sm:py-2 border border-gray-200 rounded-md focus:ring-2 focus:ring-black focus:border-transparent transition-all text-center"
                                                    onchange="validateAndUpdateQuantity(this)"
                                                    oninput="this.value = this.value.replace(/[^0-9]/g, ''); if(this.value > <%= item.productId.quantity %>) this.value = <%= item.productId.quantity %>;"
                                                >
                                        
                                                <button 
                                                    type="button" 
                                                    class="px-2 py-1 border border-gray-200 rounded-md focus:ring-2 focus:ring-black focus:border-transparent transition-all"
                                                    onclick="updateQuantity(this, 1)"
                                                    data-product-id="<%= item.productId._id %>">
                                                    +
                                                </button>
                                            </div>
                                        </td>
                                        <td class="px-4 sm:px-6 py-3 sm:py-4 text-gray-900">₹<%= item.productId.salePrice.toFixed(2) %></td>
                        
                                        <td class="px-4 sm:px-6 py-3 sm:py-4 font-medium text-gray-900">₹<%= (item.productId.salePrice * item.quantity).toFixed(2) %></td>
                                        
                                        <td class="px-4 sm:px-6 py-3 sm:py-4">
                                            <button 
                                                class="text-gray-500 hover:text-red-600 transition-colors text-sm uppercase tracking-wide"
                                                onclick="removeFromCart('<%= item.productId._id %>')"
                                            >
                                                Remove
                                            </button>
                                        </td>
                                    </tr>
                                <% }) %>
                            </tbody>
                        </table>
                        
                        
                    </div>


                    

                    <div class="border-t border-gray-200 bg-gray-50">
                        <div class="px-4 sm:px-6 py-4 lg:px-8">
                            <div class="flex justify-between items-center">
                                <div class="text-sm sm:text-base font-medium text-gray-900">Order Total</div>
                                <div class="text-xl sm:text-2xl font-light text-gray-900">₹<%= total.toFixed(2) %></div>
                            </div>
                        </div>
                    </div>
                </div>

              
                <div class="flex flex-col sm:flex-row justify-end space-y-4 sm:space-y-0 sm:space-x-4">
                    <a href="/" class="w-full sm:w-auto px-6 py-3 text-center text-sm text-gray-600 hover:text-gray-800 uppercase tracking-wide transition-colors border border-gray-300 hover:border-gray-400">
                        Continue Shopping
                    </a>
                    <a href="/checkout" class="w-full sm:w-auto px-6 py-3 text-center bg-black text-white hover:bg-gray-800 text-sm uppercase tracking-wide transition-colors">
                        Proceed to Checkout
                    </a>
                </div>
            <% } else { %>
               
                <div class="text-center py-12 sm:py-16 bg-white shadow-sm rounded-lg">
                    <p class="text-lg sm:text-xl text-gray-500 mb-6 sm:mb-8 px-4">Your shopping bag is empty</p>
                    <a href="/" class="inline-block px-6 sm:px-8 py-3 bg-black text-white hover:bg-gray-800 text-sm uppercase tracking-wide transition-colors">
                        Start Shopping
                    </a>
                </div>
            <% } %>
        </div>
    </section>


<%- include("../partials/footer.ejs")  %>

<script>
 function handleAuthError(error) {
            if (error.redirect) {
                Swal.fire({
                    icon: 'warning',
                    title: 'Authentication Required',
                    text: 'Please log in to continue.',
                    confirmButtonText: 'Go to Login',
                }).then((result) => {
                    if (result.isConfirmed) {
                        window.location.href = error.redirect;
                    }
                });
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: error.message || 'An unexpected error occurred.',
                });
            }
        }



        function removeFromCart(productId) {
            Swal.fire({
                title: 'Are you sure?',
                text: "You won't be able to revert this!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, remove it!'
            }).then((result) => {
                if (result.isConfirmed) {
                    fetch(`/cart/remove/${productId}`, {
                        method: 'DELETE',
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.message === 'Item removed from cart successfully') {
                            Swal.fire(
                                'Removed!',
                                'The item has been removed from your cart.',
                                'success'
                            ).then(() => {
                                window.location.reload();
                            });
                        } else if (data.redirect) {
                            handleAuthError(data);
                        } else {
                            throw new Error(data.message || 'Failed to remove item from cart');
                        }
                    })
                    .catch(error => {
                        handleAuthError(error);
                    });
                }
            });
        }
</script>


<script>
   async function validateAndUpdateQuantity(inputElement) {
    const productId = inputElement.getAttribute('data-product-id');
    const availableQuantity = parseInt(inputElement.getAttribute('data-available-quantity'));
    let quantity = parseInt(inputElement.value);

    console.log({ productId, availableQuantity, quantity });

  
    if (isNaN(quantity) || quantity < 1) {
        quantity = 1;
    }

    inputElement.value = quantity;

    try {
        const response = await fetch('/update', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ productId, quantity }),
        });

        const data = await response.json();
        console.log({ responseStatus: response.status, data });

        if (response.ok) {
         
            if (quantity >= availableQuantity) {
                Swal.fire({
                    icon: 'warning',
                    title: 'Stock Limit Reached',
                    text: `Only ${availableQuantity} items are available in stock.`,
                });
                inputElement.value = availableQuantity; 
            }

            
            const subtotalCell = inputElement.closest('tr').querySelector('.subtotal-cell');
            if (subtotalCell) {
                subtotalCell.textContent = `₹${(data.item.totalPrice).toFixed(2)}`;
            }

    
            const totalElement = document.querySelector('.order-total');
            if (totalElement) {
                totalElement.textContent = `₹${(data.total).toFixed(2)}`;
            }

          
            setTimeout(() => {
                window.location.reload();
            }, 2000)
        } else {
            throw new Error(data.message || 'Failed to update cart');
        }
    } catch (error) {
        console.error('Error updating quantity:', error);
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: error.message || 'Failed to update quantity',
        });
    }
}


 
 
 function updateQuantity(button, change) {
     const input = button.parentElement.querySelector('input[name="quantity"]');
     const max = parseInt(input.getAttribute('max'), 10);
     const min = parseInt(input.getAttribute('min'), 10);
     let value = parseInt(input.value, 10) || min;

     value += change;

     if (value < min) value = min;
     if (value > max) value = max;

     input.value = value;

     input.dispatchEvent(new Event('change'));
 }
 </script>
 
</body>
</html>