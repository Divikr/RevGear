<!DOCTYPE html>
<html lang="en" class="dark">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>RevGear </title>
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
  <script src="https://cdnjs.cloudflare.com/ajax/libs/apexcharts/3.42.0/apexcharts.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.4.0/jspdf.umd.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.5.13/jspdf.plugin.autotable.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.17.0/xlsx.full.min.js"></script>
  <link rel="stylesheet" href="/admin/product.css">
 
  <style>
    :root {
      --primary-dark: #1f2937;
      --secondary-dark: #111827;
      --accent-blue: #3b82f6;
      --text-primary: #e5e7eb;
      --text-secondary: #fefeff;
    }

    body {
      background-color: var(--secondary-dark);
      color: var(--text-primary);
    }

    @keyframes fadeInUp {
      from {
        opacity: 0;
        transform: translateY(20px);
      }

      to {
        opacity: 1;
        transform: translateY(0);
      }
    }

    @keyframes glowPulse {
      0% {
        box-shadow: 0 0 5px rgba(59, 130, 246, 0.5);
      }

      50% {
        box-shadow: 0 0 15px rgba(59, 130, 246, 0.8);
      }

      100% {
        box-shadow: 0 0 5px rgba(59, 130, 246, 0.5);
      }
    }

    .metric-card {
      background: var(--primary-dark);
      border-radius: 16px;
      border: 1px solid rgba(255, 255, 255, 0.1);
      transition: all 0.3s ease;
    }

    .metric-card:hover {
      transform: translateY(-5px);
      border-color: var(--accent-blue);
      box-shadow: 0 8px 24px rgba(59, 130, 246, 0.2);
    }

    .icon-container {
      width: 48px;
      height: 48px;
      border-radius: 12px;
      display: flex;
      align-items: center;
      justify-content: center;
      transition: all 0.3s ease;
    }

    .metric-card:hover .icon-container {
      transform: scale(1.1);
      animation: glowPulse 2s infinite;
    }

    .chart-container {
      background: var(--primary-dark);
      border-radius: 16px;
      border: 1px solid rgba(255, 255, 255, 0.1);
      transition: all 0.3s ease;
    }

    .chart-container:hover {
      border-color: var(--accent-blue);
      box-shadow: 0 8px 24px rgba(0, 0, 0, 0.2);
    }

    .table-container {
      background: var(--primary-dark);
      border-radius: 16px;
      border: 1px solid rgba(255, 255, 255, 0.1);
      overflow: hidden;
    }

    .table-row {
      transition: all 0.2s ease;
      border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    }

    .table-row:hover {
      background: rgba(59, 130, 246, 0.1);
      transform: translateX(4px);
    }

    .fade-in-up {
      animation: fadeInUp 0.6s ease-out forwards;
    }


    @keyframes downloadPulse {
      0% {
        box-shadow: 0 0 0 0 rgba(59, 130, 246, 0.4);
      }

      70% {
        box-shadow: 0 0 0 10px rgba(59, 130, 246, 0);
      }

      100% {
        box-shadow: 0 0 0 0 rgba(59, 130, 246, 0);
      }
    }

    #downloadReport {
      position: relative;
      overflow: hidden;
      transform: translateZ(0);
    }

    #downloadReport:active {
      transform: scale(0.97);
    }

    #downloadReport.downloading {
      animation: downloadPulse 1.5s infinite;
      cursor: wait;
    }

    .download-progress {
      position: absolute;
      bottom: 0;
      left: 0;
      height: 3px;
      background: rgb(219, 234, 254);
      transition: width 0.3s ease-in-out;
    }

    .chart-container {
      background: var(--primary-dark);
      border-radius: 16px;
      border: 1px solid rgba(255, 255, 255, 0.1);
      transition: all 0.3s ease;
      width: 100%;
 
      max-width: 100%;
      
    }

    .chart-container canvas {
      width: 100%;
   
      height: 100%;
   
    }

   
    .chart-container.col-span-1 {
      height: 500px;
  
    }

    .chart-container.col-span-3 {
      height: 500px;
     
    }

 
    @media (max-width: 768px) {
      .chart-container {
        flex-direction: column;
       
      }
    }


    .top-sellers-section .progress-bar {
      height: 8px;
      background: rgba(59, 130, 246, 0.1);
      border-radius: 4px;
      overflow: hidden;
    }

    .top-sellers-section .progress-value {
      height: 100%;
      border-radius: 4px;
      transition: width 1s ease-in-out;
    }

    .top-sellers-section .item-row {
      animation: slideIn 0.5s ease-out forwards;
      opacity: 0;
      transform: translateY(10px);
    }

    @keyframes slideIn {
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }

    .top-sellers-section .rank-badge {
      width: 24px;
      height: 24px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 0.875rem;
      font-weight: 600;
    }

    .top-sellers-section .rank-1 {
      background: linear-gradient(135deg, #ffd700, #ffa500);
      color: #000;
    }

    .top-sellers-section .rank-2 {
      background: linear-gradient(135deg, #C0C0C0, #A9A9A9);
      color: #000;
    }

    .top-sellers-section .rank-3 {
      background: linear-gradient(135deg, #CD7F32, #8B4513);
      color: #fff;
    }

    .top-sellers-section .item-row:hover {
      transform: translateX(8px);
      transition: transform 0.3s ease;
    }


    @keyframes shake {

      0%,
      100% {
        transform: translateX(0);
      }

      25% {
        transform: translateX(-5px);
      }

      75% {
        transform: translateX(5px);
      }
    }

    .shake {
      animation: shake 0.5s ease-in-out;
    }

    .download-progress {
      transition: width 1s ease-in-out;
      width: 0%;
    }

    #modalContent {
      transition: all 0.3s ease-in-out;
    }

    .format-button {
      position: relative;
      overflow: hidden;
    }

    .format-button:hover .download-progress {
      background-opacity: 0.8;
    }

    .format-button:active {
      transform: scale(0.98);
    }
  </style>
</head>

<body class="min-h-screen">
  <div class="flex">
    <div class="sidebar" id="sidebar">
          

      <div class="admin-profile">
          <div class="admin-avatar">A</div>
      </div>

      <ul class="nav-menu">
          <a href="/admin/dashboard" class="nav-item active">
              <i class="fas fa-tachometer-alt"></i>
              <span>Dashboard</span>
          </a>
          <a href="/admin/product" class="nav-item ">
              <i class="fas fa-box"></i>
              <span>Products</span>
          </a>
          <a href="/admin/customer" class="nav-item ">
              <i class="fas fa-users"></i>
              <span>Users</span>
          </a>
          <a href="/admin/category" class="nav-item">
              <i class="fas fa-folder-open"></i>
              <span>Categories</span>
          </a>
          <a href="/admin/orderlists" class="nav-item">
              <i class="fas fa-shopping-cart"></i>
              <span>Orders</span>
          </a>
          <a href="/admin/coupon" class="nav-item">
              <i class="fas fa-tags"></i>
              <span>Coupons</span>
          </a>
         
          <a href="/admin/offer" class="nav-item">
            <i class="fas fa-gift"></i>
            <span>Offer</span>
        </a>
      </ul>
  </div>

  <div class="main-content">
      <div class="header">
          <h1>RevGear</h1>
          <a href="/admin/adminlogout" id="adminlogout">Logout</a>
      </div>

    <div class="flex-1 p-8">

      <div class="flex justify-between items-center mb-8 fade-in-up">
        <h1 class="text-4xl font-bold bg-gradient-to-r from-blue-400 to-blue-600 text-transparent bg-clip-text">
          Dashboard Overview
        </h1>
      </div>


      <div class="sales-report-section mb-8 fade-in-up">
    
        <div class="chart-container p-6 mb-6">
          <div class="flex flex-col md:flex-row justify-between items-center mb-6">
            <h2 class="text-xl font-bold mb-4 md:mb-0">Sales Report</h2>
            <div class="flex gap-4 items-center">
              <div class="relative">
                <input type="date" id="startDate" class="bg-gray-700 text-white rounded-lg px-4 py-2 focus:ring-2 focus:ring-blue-500 outline-none">
              </div>
              <span class="text-gray-400">to</span>
              <div class="relative">
                <input type="date" id="endDate" class="bg-gray-700 text-white rounded-lg px-4 py-2 focus:ring-2 focus:ring-blue-500 outline-none">
              </div>
              <select id="timeFrame" class="bg-gray-700 text-white rounded-lg px-4 py-2 focus:ring-2 focus:ring-blue-500 outline-none">
                <option value="daily">Daily</option>
                <option value="weekly">Weekly</option>
                <option value="monthly">Monthly</option>
                <option value="yearly">Yearly</option>
              </select>
              <button id="applyFilterButton" class="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-lg transition-colors">
                Apply Filter
              </button>



          
              <button id="downloadReport" class="group relative bg-gradient-to-r from-blue-500 to-blue-600 hover:from-blue-600 hover:to-blue-700 text-white px-6 py-2 rounded-lg transition-all duration-300 ease-in-out flex items-center gap-2 overflow-hidden">
                <span class="relative z-10 flex items-center gap-2">
                  <i class="fas fa-download transition-transform group-hover:-translate-y-1 group-hover:translate-x-1"></i>
                  Download Report
                </span>
                <span class="absolute inset-0 bg-gradient-to-r from-blue-600 to-blue-700 transform translate-y-full transition-transform duration-300 ease-out group-hover:translate-y-0"></span>
              </button>

             
              <div id="downloadModal" class="fixed inset-0 bg-black/50 backdrop-blur-sm z-50 hidden flex items-center justify-center">
                <div class="bg-gray-900 rounded-xl p-6 max-w-md w-full mx-4 transform transition-all duration-300 scale-95 opacity-0" id="modalContent">
                  <div class="flex justify-between items-center mb-6">
                    <h3 class="text-xl font-bold text-white">Download Sales Report</h3>
                    <button onclick="closeModal()" class="text-gray-400 hover:text-white transition-colors">
                      <i class="fas fa-times text-lg"></i>
                    </button>
                  </div>

                  <p class="text-gray-400 mb-6">Choose your preferred format to download the sales report:</p>

                  <div class="grid grid-cols-2 gap-4 mb-6">
              
                    <button onclick="handleDownload('pdf')" class="format-button bg-gray-800 hover:bg-gray-700 p-4 rounded-lg transition-all duration-300 group" id="pdfButton">
                      <div class="flex flex-col items-center">
                        <div class="w-12 h-12 bg-red-500/20 rounded-full flex items-center justify-center mb-3 group-hover:scale-110 transition-transform">
                          <i class="fas fa-file-pdf text-red-500 text-xl"></i>
                        </div>
                        <span class="text-white font-medium">PDF Format</span>
                        <span class="text-gray-400 text-sm">Download as PDF file</span>
                      </div>
                      <div class="download-progress hidden h-1 bg-red-500 mt-3 rounded-full"></div>
                    </button>

                 
                    <button onclick="handleDownload('excel')" class="format-button bg-gray-800 hover:bg-gray-700 p-4 rounded-lg transition-all duration-300 group" id="excelButton">
                      <div class="flex flex-col items-center">
                        <div class="w-12 h-12 bg-green-500/20 rounded-full flex items-center justify-center mb-3 group-hover:scale-110 transition-transform">
                          <i class="fas fa-file-excel text-green-500 text-xl"></i>
                        </div>
                        <span class="text-white font-medium">Excel Format</span>
                        <span class="text-gray-400 text-sm">Download as Excel file</span>
                      </div>
                      <div class="download-progress hidden h-1 bg-green-500 mt-3 rounded-full"></div>
                    </button>
                  </div>
                </div>
              </div>
            </div>
          </div>



          <div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-6">
            <div class="metric-card p-6">
              <div class="flex items-center justify-between">
                <div>
                  <p class="text-gray-400 text-sm mb-1">Total Sales</p>
                  <p class="text-2xl font-bold text-white" id="totalSales">₹0</p>
                </div>
                <div class="icon-container bg-blue-500/20">
                  <i class="fas fa-chart-line text-blue-500 text-xl"></i>
                </div>
              </div>
            </div>


            <div class="metric-card p-6">
              <div class="flex items-center justify-between">
                <div>
                  <p class="text-gray-400 text-sm mb-1">Total Orders</p>
                  <p class="text-2xl font-bold text-white" id="totalOrders">0</p>
                </div>
                <div class="icon-container bg-green-500/20">
                  <i class="fas fa-shopping-cart text-green-500 text-xl"></i>
                </div>
              </div>
            </div>

            <div class="metric-card p-6">
              <div class="flex items-center justify-between">
                <div>
                  <p class="text-gray-400 text-sm mb-1">Avg. Order Value</p>
                  <p class="text-2xl font-bold text-white" id="avgOrderValue">₹0</p>
                </div>
                <div class="icon-container bg-purple-500/20">
                  <i class="fas fa-coins text-purple-500 text-xl"></i>
                </div>
              </div>
            </div>

            <div class="metric-card p-6">
              <div class="flex items-center justify-between">
                <div>
                  <p class="text-gray-400 text-sm mb-1">Total Items Sold</p>
                  <p class="text-2xl font-bold text-white" id="totalItems">0</p>
                </div>
                <div class="icon-container bg-yellow-500/20">
                  <i class="fas fa-box text-yellow-500 text-xl"></i>
                </div>
              </div>
            </div>

            
            <div class="metric-card p-6">
              <div class="flex items-center justify-between">
                <div>
                  <p class="text-gray-400 text-sm mb-1">Total Coupons Used</p>
                  <p class="text-2xl font-bold text-white" id="totalCoupons">0</p>
                </div>
                <div class="icon-container bg-pink-500/20">
                  <i class="fas fa-ticket-alt text-pink-500 text-xl"></i>
                </div>
              </div>
            </div>

            <div class="metric-card p-6">
              <div class="flex items-center justify-between">
                <div>
                  <p class="text-gray-400 text-sm mb-1">Coupon Deductions</p>
                  <p class="text-2xl font-bold text-white" id="couponDeductions">₹0</p>
                </div>
                <div class="icon-container bg-red-500/20">
                  <i class="fas fa-tags text-red-500 text-xl"></i>
                </div>
              </div>
            </div>

            <div class="metric-card p-6">
              <div class="flex items-center justify-between">
                <div>
                  <p class="text-gray-400 text-sm mb-1">Total Discounts</p>
                  <p class="text-2xl font-bold text-white" id="totalDiscounts">₹0</p>
                </div>
                <div class="icon-container bg-orange-500/20">
                  <i class="fas fa-percent text-orange-500 text-xl"></i>
                </div>
              </div>
            </div>

            <div class="metric-card p-6">
              <div class="flex items-center justify-between">
                <div>
                  <p class="text-gray-400 text-sm mb-1">Net Revenue</p>
                  <p class="text-2xl font-bold text-white" id="netRevenue">₹0</p>
                </div>
                <div class="icon-container bg-emerald-500/20">
                  <i class="fas fa-sack-dollar text-emerald-500 text-xl"></i>
                </div>
              </div>
            </div>


            <div class="chart-container col-span-3 p-4">
              <canvas id="salesChart" height="500" width="1600"></canvas>
            </div>
            <div class="chart-container col-span-1 p-4 flex items-center justify-center">
              <canvas id="paymentMethodChart" height="500" width="500"></canvas>
            </div>

          </div>
        </div>

    
        <div class="table-container p-6">
          <div class="overflow-x-auto">
            <table class="w-full" id="salesTable">
              <thead>
                <tr class="text-gray-400 text-sm uppercase">
                  <th class="py-3 px-4 text-left">Date</th>
                  <th class="py-3 px-4 text-left">Orders</th>
                  <th class="py-3 px-4 text-left">Sales</th>
                  <th class="py-3 px-4 text-left">Avg. Order Value</th>
                  <th class="py-3 px-4 text-left">Items Sold</th>
                </tr>
              </thead>
              <tbody id="salesTableBody">
             
              </tbody>
            </table>
          </div>
        </div>
      </div>
     
      <div class="top-sellers-section mb-8 fade-in-up">
        <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
        
          <div class="chart-container p-6">
            <div class="flex items-center justify-between mb-6">
              <h3 class="text-lg font-bold">Top Products</h3>
              <div class="icon-container bg-indigo-500/20">
                <i class="fas fa-box-open text-indigo-500 text-xl"></i>
              </div>
            </div>
            <div class="space-y-4">
              <div id="topProductsList" class="space-y-3">
               
              </div>
            </div>
          </div>

          
          <div class="chart-container p-6">
            <div class="flex items-center justify-between mb-6">
              <h3 class="text-lg font-bold">Top Categories</h3>
              <div class="icon-container bg-emerald-500/20">
                <i class="fas fa-layer-group text-emerald-500 text-xl"></i>
              </div>
            </div>
            <div class="space-y-4">
              <div id="topCategoriesList" class="space-y-3">
                
              </div>
            </div>
          </div>

        
        </div>
      </div>
    </div>
  </div>



  <script>
    document.addEventListener('DOMContentLoaded', function() {
   
      const colors = ['#3b82f6', '#10b981', '#f59e0b', '#ef4444', '#8b5cf6'];

   
      const sharedOptions = {
        theme: {
          mode: 'dark',
          palette: 'palette1'
        },
        chart: {
          background: 'transparent',
          fontFamily: 'inherit',
        },
        legend: {
          labels: {
            colors: '#9ca3af'
          }
        }
      };

    });



    async function downloadPDF() {
      const {
        jsPDF
      } = window.jspdf;
      const doc = new jsPDF();

      doc.text("Sales Report RevGear", 14, 10);
      doc.setFontSize(8);

      
      const data = await fetchSalesDataForPDF();

    
      const headers = [
        ["Date", "Orders", "Sales (₹)", "Avg Order Value (₹)", "Items Sold", "Coupon Used", "Coupon Deduction", "Total Discounts", "Net Revenue"]
      ];
      const rows = data.map(item => [
        item.date,
        item.orders,
        `₹${item.sales.toFixed(2)}`,
        `₹${item.avgOrderValue}`,
        item.totalItems,
        item.totalCouponsUsed,
        item.couponDeductions,
        item.totalDiscounts,
        item.netRevenue
      ]);

      doc.autoTable({
        head: headers,
        body: rows,
        startY: 20,
        theme: "striped"
      });

      doc.save("Sales_Report.pdf");
    }

    async function downloadExcel() {
      const data = await fetchSalesDataForPDF();

      
      const worksheetData = [
        ["Date", "Orders", "Sales (₹)", "Avg Order Value (₹)", "Items Sold", "Coupon Used", "Coupon Deduction", "Total Discounts", "Net Revenue"]
      ];
      data.forEach(item => {
        worksheetData.push([item.date, item.orders, `₹${item.sales.toFixed(2)}`, `₹${item.avgOrderValue}`, item.totalItems, item.totalCouponsUsed, item.couponDeductions, item.totalDiscounts, item.netRevenue]);
      });

     
      const wb = XLSX.utils.book_new();
      const ws = XLSX.utils.aoa_to_sheet(worksheetData);
      XLSX.utils.book_append_sheet(wb, ws, "Sales Report RevGear");

     
      XLSX.writeFile(wb, "Sales_Report.xlsx");
    }


    async function fetchSalesDataForPDF() {
      const startDate = document.getElementById('startDate').value;
      const endDate = document.getElementById('endDate').value;
      const timeFrame = document.getElementById('timeFrame').value;

      const response = await fetch(`/admin/sales-report?startDate=${startDate}&endDate=${endDate}&timeFrame=${timeFrame}`);
      const result = await response.json();
      return result.data.salesData;
    }


    document.addEventListener('DOMContentLoaded', function() {
      const startDateInput = document.getElementById('startDate');
      const endDateInput = document.getElementById('endDate');
   
      const today = new Date();
      const startDate = new Date();
      startDate.setDate(today.getDate() - 7);

      startDateInput.value = startDate.toISOString().split('T')[0];
      endDateInput.value = new Date(today.setDate(today.getDate() + 1)).toISOString().split('T')[0]; 
    });


    function updateMetricCards(summary) {
     
      document.getElementById('totalSales').textContent = `₹${summary.grossRevenue}`;
      document.getElementById('totalOrders').textContent = summary.totalOrders;
      document.getElementById('avgOrderValue').textContent = `₹${summary.avgOrderValue}`;
      document.getElementById('totalItems').textContent = summary.totalItems;

    
      document.getElementById('totalCoupons').textContent = summary.totalCouponsUsed;
      document.getElementById('couponDeductions').textContent = `₹${summary.couponDeductions}`;
      document.getElementById('totalDiscounts').textContent = `₹${summary.totalDiscounts}`;
      document.getElementById('netRevenue').textContent = `₹${summary.netRevenue}`;
    }



    document.getElementById('applyFilterButton').addEventListener('click', async () => {
      const startDate = document.getElementById('startDate').value;
      const endDate = document.getElementById('endDate').value;
      const timeFrame = document.getElementById('timeFrame').value;

      try {
        const response = await fetch(`/admin/sales-report?startDate=${startDate}&endDate=${endDate}&timeFrame=${timeFrame}`);
        const result = await response.json();

        if (result.success) {
          document.getElementById('totalSales').innerText = `₹${result.data.summary.totalSales.toFixed(2)}`;
          document.getElementById('totalOrders').innerText = result.data.summary.totalOrders;
          document.getElementById('avgOrderValue').innerText = `₹${result.data.summary.avgOrderValue}`;
          document.getElementById('totalItems').innerText = result.data.summary.totalItems;
          updateMetricCards(result.data.summary);

        
          const salesTableBody = document.getElementById('salesTableBody');
          salesTableBody.innerHTML = ''; 

          result.data.salesData.forEach((item) => {
            const row = document.createElement('tr');
            row.classList.add('table-row');
            row.innerHTML = `
                    <td class="py-3 px-4">${item.date}</td>
                    <td class="py-3 px-4">${item.orders}</td>
                    <td class="py-3 px-4">₹${item.sales.toFixed(2)}</td>
                    <td class="py-3 px-4">₹${item.avgOrderValue}</td>
                    <td class="py-3 px-4">${item.totalItems}</td>
                `;
            salesTableBody.appendChild(row);
          });

          
          updateSalesChart(result.data.salesData);

        } else {
          alert(result.message || 'Failed to fetch sales report.');
        }
      } catch (error) {
        console.error('Error fetching sales report:', error);
      }
    });

    const ctx = document.getElementById('salesChart').getContext('2d');
    let salesChart;

    function updateSalesChart(data) {
      const labels = data.map(item => item.date);
      const sales = data.map(item => item.sales);

      if (salesChart) salesChart.destroy();

      salesChart = new Chart(ctx, {
        type: 'line',
        data: {
          labels: labels,
          datasets: [{
            label: 'Sales',
            data: sales,
            backgroundColor: 'rgba(59, 130, 246, 0.2)',
            borderColor: 'rgba(59, 130, 246, 1)',
            fill: true,
            tension: 0.3
          }]
        },
        options: {
          responsive: true,
          scales: {
            x: {
              title: {
                color: '#fff',
                display: true,
                text: 'Date'
              }
            },
            y: {
              title: {
                color: '#fff',
                display: true,
                text: 'Sales (₹)'
              }
            }
          }
        }
      });
    }




    

    async function fetchSalesReport() {
      try {
        const response = await fetch('/admin/sales-report'); 
        const reportData = await response.json();

        if (reportData.success) {
          const paymentMethodStats = reportData.data.paymentMethodStats;
          const labels = paymentMethodStats.map(stat => stat._id);
          const values = paymentMethodStats.map(stat => stat.count);

          renderPaymentMethodChart(labels, values);
        } else {
          console.error("Error fetching sales report:", reportData.message);
        }
      } catch (error) {
        console.error("Error fetching sales report:", error);
      }
    }

    function renderPaymentMethodChart(labels, values) {
      const ctx = document.getElementById('paymentMethodChart').getContext('2d');
      new Chart(ctx, {
        type: 'doughnut',
        data: {
          labels: labels,
          datasets: [{
            label: 'Payment Method Distribution',
            data: values,
            backgroundColor: [
              'rgba(54, 162, 235, 0.6)',
              'rgba(255, 206, 86, 0.6)',
              'rgba(75, 192, 192, 0.6)',
              'rgba(255, 99, 132, 0.6)'
            ],
            borderColor: [
              'rgba(54, 162, 235, 1)',
              'rgba(255, 206, 86, 1)',
              'rgba(75, 192, 192, 1)',
              'rgba(255, 99, 132, 1)'
            ],
            borderWidth: 1
          }]
        },
        options: {
          responsive: true,
          plugins: {
            legend: {
              position: 'top',
            },
            tooltip: {
              callbacks: {
                label: function(context) {
                  const total = values.reduce((a, b) => a + b, 0);
                  const percentage = ((context.raw / total) * 100).toFixed(2);
                  return `${context.label}: ${context.raw} (${percentage}%)`;
                }
              }
            }
          }
        }
      });
    }

    fetchSalesReport();




  

    function formatNumber(num) {
      if (num >= 1000000) return (num / 1000000).toFixed(1) + 'm';
      if (num >= 1000) return (num / 1000).toFixed(1) + 'k';
      return num;
    }

   
    function createItemRow(item, index, maxValue, type) {
      const percentage = (item.value / maxValue) * 100;
      const delay = index * 0.1;
      const rankClass = index < 3 ? `rank-${index + 1}` : 'bg-gray-600 text-white';

      return `
    <div class="item-row" style="animation-delay: ${delay}s">
      <div class="flex items-center justify-between mb-2">
        <div class="flex items-center gap-3">
          <div class="rank-badge ${rankClass}">${index + 1}</div>
          <div>
            <h4 class="font-medium text-sm text-gray-200">${item.name || item.productName}</h4>
            <p class="text-xs text-gray-400">${formatNumber(item.value)} ${type}</p>
          </div>
        </div>
        <div class="text-sm font-medium text-gray-400">${percentage.toFixed(1)}%</div>
      </div>
      <div class="progress-bar">
        <div class="progress-value" style="width: ${percentage}%; 
          background: ${index < 3 
            ? `linear-gradient(90deg, var(--accent-blue), ${index === 0 ? '#4f46e5' : index === 1 ? '#0ea5e9' : '#06b6d4'})` 
            : 'var(--accent-blue)'}">
        </div>
      </div>
    </div>
  `;
    }
    

    async function fetchTopSellers() {
      try {
        const response = await fetch('/admin/top-sellers'); 
        const data = await response.json();
console.lo
        if (data.success) {
          const maxProductValue = Math.max(...data.products.map(p => p.value));
          const productsHTML = data.products
            .slice(0, 10)
            .map((product, index) => createItemRow(product, index, maxProductValue, 'sales'))
            .join('');
          document.getElementById('topProductsList').innerHTML = productsHTML;

         
          const maxCategoryValue = Math.max(...data.categories.map(c => c.value));
          const categoriesHTML = data.categories
            .slice(0, 10)
            .map((category, index) => createItemRow(category, index, maxCategoryValue, 'items'))
            .join('');
          document.getElementById('topCategoriesList').innerHTML = categoriesHTML;

         
          const maxBrandValue = Math.max(...data.brands.map(b => b.value));
          const brandsHTML = data.brands
            .slice(0, 10)
            .map((brand, index) => createItemRow(brand, index, maxBrandValue, 'products'))
            .join('');
          document.getElementById('topBrandsList').innerHTML = brandsHTML;
        }
      } catch (error) {
        console.error('Error fetching top sellers:', error);
      }
    }

   
    fetchTopSellers();

   
    setInterval(fetchTopSellers, 300000);




   
    function openModal() {
      const modal = document.getElementById('downloadModal');
      const modalContent = document.getElementById('modalContent');
      modal.classList.remove('hidden');
     
      void modalContent.offsetWidth;
      modalContent.classList.remove('scale-95', 'opacity-0');
      modalContent.classList.add('scale-100', 'opacity-100');
    }

    function closeModal() {
      const modal = document.getElementById('downloadModal');
      const modalContent = document.getElementById('modalContent');
      modalContent.classList.remove('scale-100', 'opacity-100');
      modalContent.classList.add('scale-95', 'opacity-0');
      setTimeout(() => {
        modal.classList.add('hidden');
      }, 300);
    }

    async function handleDownload(format) {
      const button = document.getElementById(`${format}Button`);
      const progressBar = button.querySelector('.download-progress');

   
      document.querySelectorAll('.format-button').forEach(btn => {
        btn.disabled = true;
        btn.classList.add('opacity-50');
      });

      
      progressBar.classList.remove('hidden');
      progressBar.style.width = '0%';

     
      setTimeout(() => {
        progressBar.style.width = '100%';
        progressBar.style.transition = 'width 1s ease-in-out';
      }, 100);

      try {
        if (format === 'pdf') {
          await downloadPDF();
        } else {
          await downloadExcel();
        }

       
        button.querySelector('i').classList.add('text-white');
        button.classList.add('bg-opacity-80');

       
        setTimeout(() => {
          closeModal();
       
          document.querySelectorAll('.format-button').forEach(btn => {
            btn.disabled = false;
            btn.classList.remove('opacity-50');
            btn.querySelector('i').classList.remove('text-white');
            btn.classList.remove('bg-opacity-80');
            btn.querySelector('.download-progress').classList.add('hidden');
          });
        }, 1000);

      } catch (error) {
        console.error(`Error downloading ${format}:`, error);
        
        progressBar.classList.add('bg-red-500');
        button.classList.add('shake');

        setTimeout(() => {
          
          progressBar.classList.remove('bg-red-500');
          button.classList.remove('shake');
          progressBar.classList.add('hidden');
          document.querySelectorAll('.format-button').forEach(btn => {
            btn.disabled = false;
            btn.classList.remove('opacity-50');
          });
        }, 2000);
      }
    }

    
    document.getElementById("downloadReport").addEventListener("click", openModal);
  </script>
</body>

</html>