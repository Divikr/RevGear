<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>RevGear</title>
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
  <link rel="stylesheet" href="/admin/addProduct.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.css">
  <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

  <style>
    .cropped-image {
      width: 100px;
      height: 100px;
      margin: 10px;
      object-fit: cover;
    }

    .delete-button {
      display: block;
      margin-top: 5px;
      background-color: #ff4d4d;
      color: white;
      border: none;
      padding: 5px;
      cursor: pointer;
    }

    .image-wrapper {
      display: inline-block;
      text-align: center;
      margin: 10px;
    }

    .size-btn.selected {
      background-color: #007bff;
      color: white;
    }

    .size-input-container {
      display: flex;
      gap: 10px;
      margin-top: 10px;
    }

    .size-input-group {
      display: none;
      align-items: center;
    }

    .size-input-group.active {
      display: flex;
    }

    .size-input-group label {
      margin-right: 10px;
    }

    .size-input-group input {
      width: 100px;
    }
  </style>
</head>

<body>
    <div class="dashboard">
        <div class="sidebar" id="sidebar">
         

            <div class="admin-profile">
                <div class="admin-avatar">A</div>
               
            </div>

            <ul class="nav-menu">
                <a href="/admin/dashboard" class="nav-item">
                    <i class="fas fa-tachometer-alt"></i>
                    <span>Dashboard</span>
                </a>
                <a href="/admin/product" class="nav-item active">
                    <i class="fas fa-box"></i>
                    <span>Products</span>
                </a>
                <a href="/admin/customer" class="nav-item ">
                    <i class="fas fa-users"></i>
                    <span>Users</span>
                </a>
                <a href="/admin/category" class="nav-item ">
                    <i class="fas fa-folder-open"></i>
                    <span>Categories</span>
                </a>
                <a href="/admin/orderlists" class="nav-item">
                    <i class="fas fa-shopping-cart"></i>
                    <span>Orders</span>
                </a>
                <a href="/admin/coupon" class="nav-item">
                    <i class="fas fa-tags"></i>
                    <span>Coupons</span>
                </a>
                
                <a href="/admin/offer" class="nav-item">
                  <i class="fas fa-gift"></i>
                  <span>Offer</span>
              </a>
            </ul>
        </div>

        <div class="main-content">
            <div class="header">
                <h1>RevGear</h1>
                <a href="/admin/product" id="adminlogout">Back</a>
            </div>
      <br>
      <div class="add-product-container">
        <div class="product-info-container">

          <div class="form-group image-upload">
            <label for="product-images">Product Images (Max 4)</label>
            <div class="image-upload-container">
              <div class="image-upload-item" id="add-image-button">
                <i class="fas fa-plus"></i>
                <span>Add Image</span>
              </div>
              <input type="file" id="image-input" name="productImage" accept="image/*" style="display: none;">
            </div>
            <div id="image-preview-container" class="image-preview-container"></div>
          </div>

       
          <div id="cropper-modal" class="modal" style="display: none;">
            <div class="modal-content">
              <h2>Crop Image</h2>
              <div id="cropper-container">
                <img id="cropper-image" alt="To be cropped" />
              </div>
              <button id="crop-button">Crop</button>
              <button id="cancel-crop-button">Cancel</button>
            </div>
          </div>

          <div class="form-group">
            <label for="product-name">Product Name</label>
            <input type="text" id="product-name" placeholder="Type product name here..." required>
          </div>

          <div class="form-group">
            <label for="description">Product Description</label>
            <input type="text" id="description" placeholder="Type product description here..." required>
          </div>


          <div class="form-group">
            <label for="product-category">Category</label>
            <select id="product-category" required>
              <option value="" disabled selected>Select a category</option>
              <% categories.forEach((category) => { %>
              <option value="<%= category.name %>"><%= category.name %></option>
              <% }) %>
            </select>
          </div>


          <div class="form-group">
            <label for="stock">Total Stock</label>
            <input type="number" id="stock" placeholder="Total stock will be calculated automatically">
          </div>

          <div class="form-group">
            <label for="product-price">Price</label>
            <input type="number" id="product-price" placeholder="Enter price here..." required min="0" step="0.01">
          </div>
          <div class="form-group">
            <label for="product-offer">Offer (%)</label>
            <input type="number" id="product-offer" placeholder="Enter offer percentage here..." min="0" max="100" step="0.01">
          </div>
          <div class="form-group">
            <label for="product-sale-price">Sale Price</label>
            <input type="number" id="product-sale-price" placeholder="Sale price will be calculated..." min="0" step="0.01" readonly>
          </div>
          <button class="save-product">Save Product</button>
        </div>
      </div>
    </div>

    <script>
      
      const maxImages = 4;
      const imageInput = document.getElementById('image-input');
      const imagePreviewContainer = document.getElementById('image-preview-container');
      const addImageButton = document.getElementById('add-image-button');
      const cropperModal = document.getElementById('cropper-modal');
      const cropperImage = document.getElementById('cropper-image');
      const cropButton = document.getElementById('crop-button');
      const cancelCropButton = document.getElementById('cancel-crop-button');

      let cropper;

      addImageButton.addEventListener('click', () => {
        if (imagePreviewContainer.childElementCount < maxImages) {
          imageInput.click();
        } else {
          Swal.fire({
      icon: 'warning',
      title: 'Limit Reached',
      text: 'You can upload a maximum of 4 images only.',
    });
        }
      });

      imageInput.addEventListener('change', (e) => {
        const file = e.target.files[0];
        if (file) {
          const reader = new FileReader();
          reader.onload = (event) => {
            cropperImage.src = event.target.result;
            openCropperModal();
          };
          reader.readAsDataURL(file); 
        }
      });

      function openCropperModal() {
        cropperModal.style.display = 'block';
        cropper = new Cropper(cropperImage, {
          aspectRatio: 1,
          viewMode: 1,
        });
      }
  
      function closeCropperModal() {
        cropperModal.style.display = 'none';
        cropper.destroy();
        cropper = null;
      }

      cropButton.addEventListener('click', () => {
        const croppedCanvas = cropper.getCroppedCanvas();
        const croppedImage = document.createElement('img');
        const deleteButton = document.createElement('button');

        croppedImage.src = croppedCanvas.toDataURL('image/png');
        croppedImage.classList.add('cropped-image');

        deleteButton.textContent = 'Delete';
        deleteButton.classList.add('delete-button');
        deleteButton.addEventListener('click', () => {
          croppedImage.parentElement.remove();
        });

        const imageWrapper = document.createElement('div');
        imageWrapper.classList.add('image-wrapper');
        imageWrapper.appendChild(croppedImage);
        imageWrapper.appendChild(deleteButton);

        imagePreviewContainer.appendChild(imageWrapper);

        closeCropperModal();
      });

      cancelCropButton.addEventListener('click', closeCropperModal);


      function validateProductForm() {
    const productName = document.getElementById('product-name');
    const description = document.getElementById('description');
    const category = document.getElementById('product-category');
    const stock = document.getElementById('stock');
    const price = document.getElementById('product-price');
    const offer = document.getElementById('product-offer');
    const imagePreviewContainer = document.getElementById('image-preview-container');

    const errors = [];

    const trimmedName = productName.value.trim();
    if (!trimmedName) {
        errors.push('Product name is required');
        productName.classList.add('input-error');
    } else if (productName.value !== trimmedName) {
        errors.push('Enter valid name');
        productName.classList.add('input-error');
    } else if (trimmedName.includes(' ')) {
        errors.push('Enter valid name');
        productName.classList.add('input-error');
    } else if (trimmedName.length < 3 || trimmedName.length > 50) {
        errors.push('Enter valid name');
        productName.classList.add('input-error');
    } else {
        productName.classList.remove('input-error');
    }

    
    const trimmedDescription = description.value.trim();
    if (!trimmedDescription) {
        errors.push('Product description is required');
        description.classList.add('input-error');
    } else if (description.value !== trimmedDescription) {
        errors.push('Enter valid Description');
        description.classList.add('input-error');
    } else if (trimmedDescription.includes(' ')) {
        errors.push('Enter valid Description');
        description.classList.add('input-error');
    } else if (trimmedDescription.length < 5 || trimmedDescription.length > 50) {
        errors.push('Enter valid Description');
        description.classList.add('input-error');
    } else {
        description.classList.remove('input-error');
    }

   
    if (!category.value) {
        errors.push('Please select a product category');
        category.classList.add('input-error');
    } else {
        category.classList.remove('input-error');
    }

  
    const stockValue = parseInt(stock.value);
    if (isNaN(stockValue) || stockValue <= 0) {
        errors.push('Stock must be a positive number');
        stock.classList.add('input-error');
    } else if (stockValue > 500) {
        errors.push('Stock cannot exceed 500 units');
        stock.classList.add('input-error');
    } else {
        stock.classList.remove('input-error');
    }

    
    const priceValue = parseFloat(price.value);
    if (isNaN(priceValue) || priceValue <= 0) {
        errors.push('Price must be a positive number');
        price.classList.add('input-error');
    } else if (priceValue > 10000) {
        errors.push('Price cannot exceed $10,000');
        price.classList.add('input-error');
    } else {
        price.classList.remove('input-error');
    }

    
    const offerValue = parseFloat(offer.value);
    if (isNaN(offerValue) || offerValue <= 0 || offerValue > 100) {
        errors.push('Offer must be a positive number between 0 and 100');
        offer.classList.add('input-error');
    } else {
        offer.classList.remove('input-error');
    }

  
    const imageWrappers = imagePreviewContainer.querySelectorAll('.image-wrapper img');
    if (imageWrappers.length === 0) {
        errors.push('At least one product image is required');
    } else if (imageWrappers.length > 4) {
        errors.push('Maximum 4 images are allowed');
    }


    if (errors.length > 0) {
        Swal.fire({
            icon: 'error',
            title: 'Validation Errors',
            html: errors.map(error => `<p>${error}</p>`).join(''),
        });
        return false;
    }

    return true;
}


      document.querySelector('.save-product').addEventListener('click', async function() {
          
        if (!validateProductForm()) {
        return;
    }


    const productName = document.getElementById('product-name').value.trim();
    const description = document.getElementById('description').value.trim();
    const category = document.getElementById('product-category').value;
    const stock = document.getElementById('stock').value;
    const price = document.getElementById('product-price').value;
    const offer = document.getElementById('product-offer').value;
    
    const formData = new FormData();
    formData.append('productName', productName);
    formData.append('description', description);
    formData.append('category', category);
    formData.append('regularPrice', price);
    formData.append('salePrice', document.getElementById('product-sale-price').value || '');
    formData.append('productOffer', offer || '');
    formData.append('quantity', stock);

    const imageWrappers = document.querySelectorAll('.image-wrapper img');
    for (let [index, img] of imageWrappers.entries()) {
        const response = await fetch(img.src);
        const blob = await response.blob();
        formData.append('productImage', blob, `product-image-${index}.png`);
    }

    try {
        const response = await fetch('/admin/addproduct', {
            method: 'POST',
            body: formData
        });

        const result = await response.json();

        if (response.ok) {
            Swal.fire({
                icon: 'success',
                title: 'Product Saved',
                text: 'Product saved successfully!',
                timer: 1500,
                showConfirmButton: false
            }).then(() => {
                window.location.href = '/admin/product';
            });
        } else {
            Swal.fire({
                icon: 'error',
                title: 'Save Failed',
                text: result.error || 'Failed to save product',
            });
        }
    } catch (error) {
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'An unexpected error occurred while saving the product',
        });
    }
})
      document.addEventListener('DOMContentLoaded', () => {
            const sidebar = document.getElementById('sidebar');
            const sidebarToggle = document.getElementById('sidebarToggle');
            const navItems = document.querySelectorAll('.nav-item');

         
            sidebarToggle.addEventListener('click', () => {
                sidebar.classList.toggle('collapsed');
                
                navItems.forEach((item, index) => {
                    item.style.transitionDelay = `${index * 50}ms`;
                });
            });

         
            navItems.forEach(item => {
                item.addEventListener('click', () => {
                    navItems.forEach(i => i.classList.remove('active'));
                    item.classList.add('active');
                });
            });

      
            const adminAvatar = document.querySelector('.admin-avatar');
            setInterval(() => {
                adminAvatar.style.animation = 'pulse 1.5s infinite';
                setTimeout(() => {
                    adminAvatar.style.animation = 'none';
                }, 1500);
            }, 5000);
        });
    </script>


<script>
  const priceInput = document.getElementById('product-price');
  const offerInput = document.getElementById('product-offer');
  const salePriceInput = document.getElementById('product-sale-price');

  
  function calculateSalePrice() {
    const price = parseFloat(priceInput.value) || 0;
    const offer = parseFloat(offerInput.value) || 0;


   

    const salePrice = price - (price * (offer / 100));
    salePriceInput.value = salePrice.toFixed(2); 
  }


  priceInput.addEventListener('input', calculateSalePrice);
  offerInput.addEventListener('input', calculateSalePrice);
</script>
</body>

</html>